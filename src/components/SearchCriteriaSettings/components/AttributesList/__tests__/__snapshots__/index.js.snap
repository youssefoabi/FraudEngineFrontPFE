// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AttributesList AttributesList renders correctly with empty mappedAttributes 1`] = `
<Fragment>
  <WithStyles(ForwardRef(FormLabel))
    className="makeStyles-StyledFormLabel-2"
  >
    Parametre lie dans l'url de recherche
  </WithStyles(ForwardRef(FormLabel))>
  <div>
    <br />
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={3}
    >
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Attribut"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": Array [
                Object {
                  "label": "Commune",
                  "value": Object {
                    "externalCode": 1,
                  },
                },
                Object {
                  "label": "Code postal",
                  "value": Object {
                    "externalCode": 2,
                  },
                },
                Object {
                  "label": "Latitude",
                  "value": Object {
                    "externalCode": 3,
                  },
                },
                Object {
                  "label": "Longitude",
                  "value": Object {
                    "externalCode": 4,
                  },
                },
              ],
              "placeholder": "Attribut",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Variable Correspondante"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": null,
              "placeholder": "Variable correspondante",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <h
        fullheight={false}
        lg={1}
        md={1}
        title={null}
        xs={1}
      >
        <y
          color="primary"
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "AddCircleIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            }
          }
          label={null}
          size="large"
          style={
            Object {
              "color": "#00adee",
            }
          }
        />
      </h>
    </WithStyles(ForwardRef(Grid))>
  </div>
</Fragment>
`;

exports[`AttributesList AttributesList renders correctly with mapedAttribute 1`] = `
<Fragment>
  <WithStyles(ForwardRef(FormLabel))
    className="makeStyles-StyledFormLabel-4"
  >
    Parametre lie dans l'url de recherche
  </WithStyles(ForwardRef(FormLabel))>
  <div>
    <br />
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={3}
    >
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Attribut"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": Array [
                Object {
                  "label": "Commune",
                  "value": Object {
                    "externalCode": 1,
                  },
                },
                Object {
                  "label": "Code postal",
                  "value": Object {
                    "externalCode": 2,
                  },
                },
                Object {
                  "label": "Latitude",
                  "value": Object {
                    "externalCode": 3,
                  },
                },
                Object {
                  "label": "Longitude",
                  "value": Object {
                    "externalCode": 4,
                  },
                },
              ],
              "placeholder": "Attribut",
            }
          }
          size="small"
          type="select"
          value={
            Object {
              "label": "Commune",
              "value": Object {
                "externalCode": 1,
              },
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Variable Correspondante"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": null,
              "placeholder": "Variable correspondante",
            }
          }
          size="small"
          type="select"
          value={
            Object {
              "label": "search",
              "value": Object {
                "externalCodeId": 1,
                "id": 3,
                "key": "search",
                "scopeId": 2,
              },
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <h
        fullheight={false}
        lg={1}
        md={1}
        title={null}
        xs={1}
      >
        <y
          color="primary"
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "RemoveCircleIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            }
          }
          label={null}
          size="large"
          style={
            Object {
              "color": "#f00",
            }
          }
        />
      </h>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={3}
    >
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Attribut"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": Array [
                Object {
                  "label": "Commune",
                  "value": Object {
                    "externalCode": 1,
                  },
                },
                Object {
                  "label": "Code postal",
                  "value": Object {
                    "externalCode": 2,
                  },
                },
                Object {
                  "label": "Latitude",
                  "value": Object {
                    "externalCode": 3,
                  },
                },
                Object {
                  "label": "Longitude",
                  "value": Object {
                    "externalCode": 4,
                  },
                },
              ],
              "placeholder": "Attribut",
            }
          }
          size="small"
          type="select"
          value={
            Object {
              "label": "Code postal",
              "value": Object {
                "externalCode": 2,
              },
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Variable Correspondante"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": null,
              "placeholder": "Variable correspondante",
            }
          }
          size="small"
          type="select"
          value={
            Object {
              "label": "cp",
              "value": Object {
                "externalCodeId": 2,
                "id": 0,
                "key": "cp",
                "scopeId": 1,
              },
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <h
        fullheight={false}
        lg={1}
        md={1}
        title={null}
        xs={1}
      >
        <y
          color="primary"
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "RemoveCircleIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            }
          }
          label={null}
          size="large"
          style={
            Object {
              "color": "#f00",
            }
          }
        />
      </h>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={3}
    >
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Attribut"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": Array [
                Object {
                  "label": "Commune",
                  "value": Object {
                    "externalCode": 1,
                  },
                },
                Object {
                  "label": "Code postal",
                  "value": Object {
                    "externalCode": 2,
                  },
                },
                Object {
                  "label": "Latitude",
                  "value": Object {
                    "externalCode": 3,
                  },
                },
                Object {
                  "label": "Longitude",
                  "value": Object {
                    "externalCode": 4,
                  },
                },
              ],
              "placeholder": "Attribut",
            }
          }
          size="small"
          type="select"
          value={
            Object {
              "label": "Longitude",
              "value": Object {
                "externalCode": 4,
              },
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Variable Correspondante"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": null,
              "placeholder": "Variable correspondante",
            }
          }
          size="small"
          type="select"
          value={
            Object {
              "label": "commune",
              "value": Object {
                "externalCodeId": 4,
                "id": 1,
                "key": "commune",
                "scopeId": 1,
              },
            }
          }
        />
      </WithStyles(ForwardRef(Grid))>
      <h
        fullheight={false}
        lg={1}
        md={1}
        title={null}
        xs={1}
      >
        <y
          color="primary"
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "RemoveCircleIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            }
          }
          label={null}
          size="large"
          style={
            Object {
              "color": "#f00",
            }
          }
        />
      </h>
    </WithStyles(ForwardRef(Grid))>
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={3}
    >
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Attribut"
          multiline={false}
          onChange={[MockFunction]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": Array [
                Object {
                  "label": "Commune",
                  "value": Object {
                    "externalCode": 1,
                  },
                },
                Object {
                  "label": "Code postal",
                  "value": Object {
                    "externalCode": 2,
                  },
                },
                Object {
                  "label": "Latitude",
                  "value": Object {
                    "externalCode": 3,
                  },
                },
                Object {
                  "label": "Longitude",
                  "value": Object {
                    "externalCode": 4,
                  },
                },
              ],
              "placeholder": "Attribut",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Variable Correspondante"
          multiline={false}
          onChange={[MockFunction]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": null,
              "placeholder": "Variable correspondante",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <h
        fullheight={false}
        lg={1}
        md={1}
        title={null}
        xs={1}
      >
        <y
          color="primary"
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "AddCircleIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            }
          }
          label={null}
          onClick={[MockFunction]}
          size="large"
          style={
            Object {
              "color": "#00adee",
            }
          }
        />
      </h>
    </WithStyles(ForwardRef(Grid))>
  </div>
</Fragment>
`;

exports[`AttributesList AttributesList renders correctly with null mapedAttribute 1`] = `
<Fragment>
  <WithStyles(ForwardRef(FormLabel))
    className="makeStyles-StyledFormLabel-3"
  >
    Parametre lie dans l'url de recherche
  </WithStyles(ForwardRef(FormLabel))>
  <div>
    <br />
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={3}
    >
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Attribut"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": Array [
                Object {
                  "label": "Commune",
                  "value": Object {
                    "externalCode": 1,
                  },
                },
                Object {
                  "label": "Code postal",
                  "value": Object {
                    "externalCode": 2,
                  },
                },
                Object {
                  "label": "Latitude",
                  "value": Object {
                    "externalCode": 3,
                  },
                },
                Object {
                  "label": "Longitude",
                  "value": Object {
                    "externalCode": 4,
                  },
                },
              ],
              "placeholder": "Attribut",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Variable Correspondante"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": null,
              "placeholder": "Variable correspondante",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <h
        fullheight={false}
        lg={1}
        md={1}
        title={null}
        xs={1}
      >
        <y
          color="primary"
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "AddCircleIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            }
          }
          label={null}
          size="large"
          style={
            Object {
              "color": "#00adee",
            }
          }
        />
      </h>
    </WithStyles(ForwardRef(Grid))>
  </div>
</Fragment>
`;

exports[`AttributesList AttributesList renders correctly without props 1`] = `
<Fragment>
  <WithStyles(ForwardRef(FormLabel))
    className="makeStyles-StyledFormLabel-1"
  >
    Parametre lie dans l'url de recherche
  </WithStyles(ForwardRef(FormLabel))>
  <div>
    <br />
    <WithStyles(ForwardRef(Grid))
      container={true}
      spacing={3}
    >
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Attribut"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": Array [
                Object {
                  "label": "Commune",
                  "value": Object {
                    "externalCode": 1,
                  },
                },
                Object {
                  "label": "Code postal",
                  "value": Object {
                    "externalCode": 2,
                  },
                },
                Object {
                  "label": "Latitude",
                  "value": Object {
                    "externalCode": 3,
                  },
                },
                Object {
                  "label": "Longitude",
                  "value": Object {
                    "externalCode": 4,
                  },
                },
              ],
              "placeholder": "Attribut",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <WithStyles(ForwardRef(Grid))
        columns={5}
        item={true}
        lg={5}
        md={5}
        xs={5}
      >
        <G
          alt={null}
          disabled={false}
          icon={null}
          id={null}
          imageSize="10x10"
          inputType="text"
          label="Variable Correspondante"
          multiline={false}
          onChange={[Function]}
          options={null}
          order={null}
          placeholder={null}
          selectProps={
            Object {
              "options": null,
              "placeholder": "Variable correspondante",
            }
          }
          size="small"
          type="select"
          value=""
        />
      </WithStyles(ForwardRef(Grid))>
      <h
        fullheight={false}
        lg={1}
        md={1}
        title={null}
        xs={1}
      >
        <y
          color="primary"
          icon={
            Object {
              "$$typeof": Symbol(react.memo),
              "compare": null,
              "displayName": "AddCircleIcon",
              "muiName": "SvgIcon",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              },
            }
          }
          label={null}
          size="large"
          style={
            Object {
              "color": "#00adee",
            }
          }
        />
      </h>
    </WithStyles(ForwardRef(Grid))>
  </div>
</Fragment>
`;
